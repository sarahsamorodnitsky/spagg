% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ensemble.R
\name{ensemble.avg}
\alias{ensemble.avg}
\title{Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting}
\usage{
ensemble.avg(
  data,
  group,
  outcome,
  cens = NULL,
  model = "survival",
  adjustments = NULL,
  n.ensemble = 1000,
  seed = NULL
)
}
\arguments{
\item{data}{data.frame or tibble containing data, including patient IDs,
image IDs, outcomes, and spatial summaries.}

\item{group}{Grouping variable for images, e.g. patient IDs.}

\item{outcome}{Column name for outcome in data.}

\item{cens}{Column name for event indicator column. If not using a survival outcome, leave as NULL.}

\item{model}{Model type. Options are "logistic" for logistic regression and
"survival" for a Cox proportional hazards model.}

\item{adjustments}{Column names for columns in data to adjust for in each ensemble replication}

\item{n.ensemble}{How many ensemble replications should be done? Default is 1000.}

\item{seed}{A seed for reproducible results. If left NULL, the funciton will generate a seed for you and return it.}
}
\value{
A list of length 2 containing the overall p-value obtained using the Cauchy combination
test (`pval`) and the seed used for reproducibility (`seed`). If the user provided a seed, then
`seed` will match what was given. Otherwise, the function randomly selects a seed and this is returned.
}
\description{
Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting
}
\examples{
# Pick a radius to evaluate Ripley's K
r <- 30

# Save the image IDs
ids <- unique(simdata$id)

# Compute Ripley's K for tumor cells at r
K.vec <- c()
for (i in 1:length(ids)) {
 # Save the ith image
 image.i <- simdata \%>\%
   dplyr::filter(id == ids[i]) \%>\%
   dplyr::select(x,y,type)

 # Convert to a point process object
 w <- spatstat.geom::convexhull.xy(image.i$x, image.i$y)
 image.i.subset <- image.i \%>\% dplyr::filter(type == "a")
 image.ppp <- spatstat.geom::as.ppp(image.i.subset, W = w)

 # Compute Kest
 Ki <- spatstat.explore::Kest(image.ppp, r = 0:30)

 # Save the result
 K.vec[i] <- Ki$iso[31]
}

data.subset <- simdata \%>\%
 dplyr::select(tidyselect::all_of(c("id", "PID", "out"))) \%>\%
 dplyr::distinct()

data.subset$spatial <- K.vec

# Remove NaNs
data.subset <- data.subset \%>\% dplyr::filter(!is.na(spatial))

# Test
ensemble.avg(data = data.subset, group = "PID", outcome = "out", model = "logistic")
}
\references{
Liu et al. (2023) Ensemble methods for testing a global null. Journal of the Royal Statistical Society Series B: Statistical Methodology. 00. 1-26.
}
