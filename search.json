[{"path":"https://sarahsamorodnitsky.github.io/spagg/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 spagg authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/SPOT.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Accommodating Multiple Radii","text":"apply spatial summary statistics, like Ripley’s K, analyses multiplexed spatial proteomics imaging data, user required select radius quantify degree clustering, repulsion, lack thereof. optimal radius, however, typically unknown beforehand. end, can helpful consider range candidate radii calculate Ripley’s K test association radius, aggregating resulting p-values. idea behind SPatial Omnibus Test (SPOT) (@samorodnitsky2024spatial). vignette, discuss integrating spagg SPOT using associated R package, SPOT. allow us compute Ripley’s K several candidate radii, aggregate resulting spatial summary statistics given radius within sample across regions--interest (ROIs), test association aggregated spatial summary outcome, combine results across radii. first load necessary packages, including SPOT package, available Github.","code":"library(spagg) library(SPOT) library(magrittr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)"},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/SPOT.html","id":"loading-in-the-data","dir":"Articles","previous_headings":"","what":"Loading in the Data","title":"Accommodating Multiple Radii","text":"analysis, use non-small cell lung cancer dataset used Non-Small Cell Lung Cancer Analysis vignette. described , downloaded data http://juliawrobel.com/MI_tutorial/MI_Data.html also available VectraPolarisData R package. purposes illustration, basic tidying data prior analysis. steps similar given link given . steps shown . four immune cell types available dataset: CD14+ cell, CD4+ T cell, CD8+ T cell, CD19+ B cell. examine pairwise colocalization CD4+ T cells tumor cells well CD8+ T cells tumor cells associations sample exhibiting MHCII-high tumor microenvironment (TME).","code":"# Load in the data load(url(\"http://juliawrobel.com/MI_tutorial/Data/lung.RDA\"))  # Label the immune cell types lung_df <- lung_df %>%   mutate(type = case_when(     phenotype_cd14 == \"CD14+\" ~ \"CD14+ cell\",     phenotype_cd19 == \"CD19+\" ~ \"CD19+ B cell\",     phenotype_cd4 == \"CD4+\" ~ \"CD4+ T cell\",     phenotype_cd8 == \"CD8+\" ~ \"CD8+ T cell\",     phenotype_other == \"Other+\" ~ \"Other\",     phenotype_ck == \"CK+\" ~ \"Tumor\"   ))  # Add a column indicating if a sample has >=5% MHCII+ tumor cells lung_df <- lung_df %>%                          dplyr::group_by(patient_id) %>%    dplyr::mutate(mhcII_high = as.numeric(mhcII_status == \"high\"))  # Change colnames colnames(lung_df)[colnames(lung_df) == \"patient_id\"] <- \"PID\"  # Add a PID column colnames(lung_df)[colnames(lung_df) == \"image_id\"] <- \"id\"  # Filter to just cells detected within the tumor lung_df_tumor <- lung_df %>% filter(tissue_category == \"Tumor\")  # Remove grouping lung_df_tumor <- lung_df_tumor %>% dplyr::ungroup()  # Remove NA types lung_df_tumor <- lung_df_tumor %>% filter(!is.na(type))  # Show the first few rows of the data head(lung_df_tumor) #> # A tibble: 6 × 39 #>   id              PID   cell_id     x     y gender mhcII_status age_at_diagnosis #>   <chr>           <chr>   <dbl> <dbl> <dbl> <chr>  <chr>                   <dbl> #> 1 #01 0-889-121 … #01 …       5  453    2.5 F      low                        85 #> 2 #01 0-889-121 … #01 …       6  463    2.5 F      low                        85 #> 3 #01 0-889-121 … #01 …      11  464    8.5 F      low                        85 #> 4 #01 0-889-121 … #01 …      12  538   10   F      low                        85 #> 5 #01 0-889-121 … #01 …      21  522   20.5 F      low                        85 #> 6 #01 0-889-121 … #01 …      22  566.  25   F      low                        85 #> # ℹ 31 more variables: stage_at_diagnosis <chr>, stage_numeric <dbl>, #> #   pack_years <dbl>, survival_days <dbl>, survival_status <dbl>, #> #   cause_of_death <chr>, adjuvant_therapy <chr>, #> #   time_to_recurrence_days <dbl>, recurrence_or_lung_ca_death <dbl>, #> #   tissue_category <chr>, cd19 <dbl>, cd3 <dbl>, cd14 <dbl>, cd8 <dbl>, #> #   hladr <dbl>, ck <dbl>, dapi <dbl>, entire_cell_axis_ratio <dbl>, #> #   entire_cell_major_axis <dbl>, entire_cell_minor_axis <dbl>, …"},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/SPOT.html","id":"weighted-aggregations","dir":"Articles","previous_headings":"","what":"Weighted Aggregations","title":"Accommodating Multiple Radii","text":"described introductory vignette, spagg contains five approaches aggregating spatial summaries given radius. Three approaches weighted means three ensemble approaches. Currently, SPOT package accommodate incorporating ensemble testing framework. feature development. now, focus applying first three weighted means test association MHCII-high TME. first three approaches weighted means summary statistics given : K‾iDiggle=1∑r=1Rinir∑r=1RinirK̂ir\\begin{equation*} \\bar K_i^{Diggle} = \\frac{1}{\\sum_{r=1}^{R_i} n_{ir}} \\sum_{r=1}^{R_i} n_{ir} \\hat K_{ir} \\end{equation*} K‾iBaddeley=1∑r=1Rinir2∑r=1Rinir2K̂ir\\begin{equation*}   \\bar K_i^{Baddeley} = \\frac{1}{\\sum_{r=1}^{R_i} n^2_{ir}} \\sum_{r=1}^{R_i} n^2_{ir} \\hat K_{ir} \\end{equation*} K‾iLandau=∑r=1RiAir∑r=1Rinir∑r=1Rinir2AirK̂ir\\begin{equation*}   \\bar K_i^{Landau} = \\frac{\\sum_{r=1}^{R_i} A_{ir}}{\\sum_{r=1}^{R_i} n_{ir}} \\sum_{r=1}^{R_i} \\frac{n^2_{ir}}{A_{ir}} \\hat K_{ir}  \\end{equation*}","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/SPOT.html","id":"incorporating-weighted-aggregations-into-spot","dir":"Articles","previous_headings":"","what":"Incorporating Weighted Aggregations into SPOT","title":"Accommodating Multiple Radii","text":"steps analysis follows: determine range candidate radii advance. analysis, use Ripley’s rule thumb consider radii 00 0.250.25 times shortest length image dataset. compute Ripley’s K radius r=0,10,20,30r = 0, 10, 20, 30 ROI. Within sample, aggregate spatial summaries across ROIs using arithmetic mean, Diggle mean, Landau mean, Baddeley mean. test association aggregated spatial summaries MHCII-high status. end, aggregate p-values using Cauchy combination test (CCT) (@liu2020cauchy). also use ensemble approaches aggregate spatial summaries test association outcome. involve two nested p-value combination steps: (1) ensemble testing level, aggregate p-values using CCT across ensemble replications; (2) SPOT level, aggregate ensemble p-values across radii using CCT . end, assess cell type pairs significant associations MHCII-high status. first start computing range radii consider. Next, iterate two pairs cell types, calculating Ripley’s K radius value, computing weighted averages (standard arithmetic mean) sample. end, test association average MHCII-status. can done using SPOT package allows user select aggregation method average spatial summary statistics across ROIs. first consider colocalization CD4+ T cells tumor cells aggregation method. also adjust patient age analysis. can also examine p-values associated aggregated method varied across radii. , plot log10-transformed p-value function radius examine significance varies. plot illustrates significance association tumor-CD4+ T cell colocalization MHCII-high status varies function aggregation method (arithmetic mean, Diggle mean, Baddeley mean, Landau mean) function radius. dashed line indicates significance α=0.05\\alpha=0.05 level. Log10-transformed p-values greater line significant. radius approximately 77 1212, four means show significance. approximately radius 4040, Baddeley mean shows consistent significance. aligns omnibus p-value Baddeley mean lowest among four options shown .","code":"# Calculate the radii  smallest.dim <- lung_df_tumor %>%   dplyr::group_by(PID) %>%   dplyr::summarize(x.range = abs(max(x) - min(x)),                     y.range = abs(max(y) - min(y)),                    min = min(x.range, y.range))  # Set the radii by Ripley's rule radii <- seq(0, 0.25 * min(smallest.dim$min), length.out = 100) # Using an arithmetic mean cd4.tumor.mean.res <- SPOT::spot(data = lung_df_tumor,                                   radii = radii,                                  outcome = \"mhcII_high\",                                   censor = NULL,                                  model.type = \"logistic\",                                  use.K = TRUE,                                  homogeneous = TRUE,                                  adjustments = \"age_at_diagnosis\",                                  marked = TRUE,                                  cell.type = c(\"CD4+ T cell\", \"Tumor\"),                                  pick.roi = \"average\") #> Progress:   0%  Progress:   0%  Progress:   0%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress: 100%  Progress: 100%  Progress: 100%  Progress: 100%  # Using the Diggle mean cd4.tumor.diggle.res <- SPOT::spot(data = lung_df_tumor,                                   radii = radii,                                  outcome = \"mhcII_high\",                                   censor = NULL,                                  model.type = \"logistic\",                                  use.K = TRUE,                                  homogeneous = TRUE,                                  adjustments = \"age_at_diagnosis\",                                  marked = TRUE,                                  cell.type = c(\"CD4+ T cell\", \"Tumor\"),                                  pick.roi = \"diggle\") #> Progress:   0%  Progress:   0%  Progress:   0%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress: 100%  Progress: 100%  Progress: 100%  Progress: 100% #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  # Using the Baddeley mean cd4.tumor.baddeley.res <- SPOT::spot(data = lung_df_tumor,                                   radii = radii,                                  outcome = \"mhcII_high\",                                   censor = NULL,                                  model.type = \"logistic\",                                  use.K = TRUE,                                  homogeneous = TRUE,                                  adjustments = \"age_at_diagnosis\",                                  marked = TRUE,                                  cell.type = c(\"CD4+ T cell\", \"Tumor\"),                                  pick.roi = \"baddeley\") #> Progress:   0%  Progress:   0%  Progress:   0%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress: 100%  Progress: 100%  Progress: 100%  Progress: 100% #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  # Using the Landau mean cd4.tumor.landau.res <- SPOT::spot(data = lung_df_tumor,                                   radii = radii,                                  outcome = \"mhcII_high\",                                   censor = NULL,                                  model.type = \"logistic\",                                  use.K = TRUE,                                  homogeneous = TRUE,                                  adjustments = \"age_at_diagnosis\",                                  marked = TRUE,                                  cell.type = c(\"CD4+ T cell\", \"Tumor\"),                                  pick.roi = \"landau\") #> Progress:   0%  Progress:   0%  Progress:   0%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   1%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   2%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   3%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   4%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   5%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   6%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   7%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   8%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:   9%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  10%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  11%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  12%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  13%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  14%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  15%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  16%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  17%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  18%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  19%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  20%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  21%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  22%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  23%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  24%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  25%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  26%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  27%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  28%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  29%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  30%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  31%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  32%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  33%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  34%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  35%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  36%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  37%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  38%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  39%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  40%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  41%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  42%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  43%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  44%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  45%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  46%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  47%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  48%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  49%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  50%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  51%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  52%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  53%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  54%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  55%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  56%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  57%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  58%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  59%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  60%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  61%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  62%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  63%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  64%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  65%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  66%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  67%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  68%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  69%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  70%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  71%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  72%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  73%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  74%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  75%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  76%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  77%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  78%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  79%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  80%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  81%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  82%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  83%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  84%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  85%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  86%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  87%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  88%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  89%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  90%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  91%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  92%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  93%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  94%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  95%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  96%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  97%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  98%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress:  99%  Progress: 100%  Progress: 100%  Progress: 100%  Progress: 100%  # Create a data.frame to show the p-values cd4.tumor.df <- data.frame(   Method = c(\"Mean\", \"Diggle\", \"Baddeley\", \"Landau\"),   P.Value = c(cd4.tumor.mean.res$overall.pval, cd4.tumor.diggle.res$overall.pval,               cd4.tumor.baddeley.res$overall.pval, cd4.tumor.landau.res$overall.pval) )  # Display cd4.tumor.df #>     Method    P.Value #> 1     Mean 0.08080625 #> 2   Diggle 0.04128158 #> 3 Baddeley 0.03202144 #> 4   Landau 0.09480697 # First, combine the results together across methods results <- dplyr::bind_rows(   cd4.tumor.mean.res$pval.df %>% dplyr::select(radius, pval),   cd4.tumor.diggle.res$pval.df %>% dplyr::select(radius, pval),   cd4.tumor.baddeley.res$pval.df %>% dplyr::select(radius, pval),   cd4.tumor.landau.res$pval.df %>% dplyr::select(radius, pval),   .id = \"source\" )  # Rename the \"source\" column, which indicates the mean type colnames(results)[1] <- \"Mean\"  # Rename the values of the Mean column results$Mean <- factor(results$Mean) levels(results$Mean) <- c(\"Mean\", \"Diggle\", \"Baddeley\", \"Landau\")  # Plot the log10-transformed p-values results %>%   dplyr::mutate(log10.pval = -log10(pval)) %>%   ggplot(aes(x = radius, y = log10.pval, color = Mean)) +   geom_point() +   theme_bw() +   xlab(\"Radius\") + ylab(\"-log10(P-Value)\") +   geom_hline(yintercept = -log10(0.05), linetype = \"dashed\") +   ggtitle(\"P-Values for Association Between Tumor and CD4+ T Cell \\n Colocalization and MHCII-High Status Across Radii\")"},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/lung_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analysis of a Non-Small Cell Lung Cancer Dataset","text":"vignette, demonstrate use spagg package aggregate multiple spatial summary statistics estimated across several regions--interest (ROIs) taken tissue sample, tumor. may possess data samples multiplexed immunofluorescence imaging spatial proteomics imaging platforms, yields spatial information cells residing tissue. Let’s consider using spagg analyze multiplexed immunohistochemistry (mIHC) dataset generated non-small cell lung cancer study Johnson et al. (2021). examine spatial distribution CD4 T cells study association major histocompatibility complex II (MHCII) status, binary tumor-level label. use Ripley’s K characterize spatial colocalization CD4+ T cells tumor cells. Since study captured multiple ROIs per tumor sample need way handling multiple estimates Ripley’s K sample. spagg provides several ways .","code":"# Loading in packages library(spagg) library(dplyr) library(magrittr) library(spatstat) library(ggplot2) library(tidyr) library(cowplot)"},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/lung_analysis.html","id":"downloading-the-data","dir":"Articles","previous_headings":"","what":"Downloading the Data","title":"Analysis of a Non-Small Cell Lung Cancer Dataset","text":"First, let’s load data use. dataset downloaded http://juliawrobel.com/MI_tutorial/MI_Data.html also available VectraPolarisData R package (Wrobel Ghosh (2022)). purposes illustration, basic tidying data prior analysis. steps similar given link given . steps shown . first start plotting ROIs example image. Consider first sample, PID=#01 0-889-121 five ROIs. plot cells ROIs .  discussed Getting Started vignette, can helpful exercise examine spatial distribution cells varies across ROIs. Notice varying spatial arrangements CD4+ T cells (green) tumor cells (pink) across ROIs particular.","code":"# Load in the data load(url(\"http://juliawrobel.com/MI_tutorial/Data/lung.RDA\"))  # Label the immune cell types lung_df <- lung_df %>%   mutate(type = case_when(     phenotype_cd14 == \"CD14+\" ~ \"CD14+ cell\",     phenotype_cd19 == \"CD19+\" ~ \"CD19+ B cell\",     phenotype_cd4 == \"CD4+\" ~ \"CD4+ T cell\",     phenotype_cd8 == \"CD8+\" ~ \"CD8+ T cell\",     phenotype_other == \"Other+\" ~ \"Other\",     phenotype_ck == \"CK+\" ~ \"Tumor\"   ))  # Add a column indicating if a sample has >=5% MHCII+ tumor cells lung_df <- lung_df %>%                          dplyr::group_by(patient_id) %>%    dplyr::mutate(mhcII_high = as.numeric(mhcII_status == \"high\"))  # Change colnames colnames(lung_df)[colnames(lung_df) == \"patient_id\"] <- \"PID\"  # Add a PID column colnames(lung_df)[colnames(lung_df) == \"image_id\"] <- \"id\"  # Filter to just cells detected within the tumor lung_df_tumor <- lung_df %>% filter(tissue_category == \"Tumor\")  # Remove grouping lung_df_tumor <- lung_df_tumor %>% dplyr::ungroup()  # Remove NA types lung_df_tumor <- lung_df_tumor %>% filter(!is.na(type))  # Show the first few rows of the data head(lung_df_tumor) #> # A tibble: 6 × 39 #>   id              PID   cell_id     x     y gender mhcII_status age_at_diagnosis #>   <chr>           <chr>   <dbl> <dbl> <dbl> <chr>  <chr>                   <dbl> #> 1 #01 0-889-121 … #01 …       5  453    2.5 F      low                        85 #> 2 #01 0-889-121 … #01 …       6  463    2.5 F      low                        85 #> 3 #01 0-889-121 … #01 …      11  464    8.5 F      low                        85 #> 4 #01 0-889-121 … #01 …      12  538   10   F      low                        85 #> 5 #01 0-889-121 … #01 …      21  522   20.5 F      low                        85 #> 6 #01 0-889-121 … #01 …      22  566.  25   F      low                        85 #> # ℹ 31 more variables: stage_at_diagnosis <chr>, stage_numeric <dbl>, #> #   pack_years <dbl>, survival_days <dbl>, survival_status <dbl>, #> #   cause_of_death <chr>, adjuvant_therapy <chr>, #> #   time_to_recurrence_days <dbl>, recurrence_or_lung_ca_death <dbl>, #> #   tissue_category <chr>, cd19 <dbl>, cd3 <dbl>, cd14 <dbl>, cd8 <dbl>, #> #   hladr <dbl>, ck <dbl>, dapi <dbl>, entire_cell_axis_ratio <dbl>, #> #   entire_cell_major_axis <dbl>, entire_cell_minor_axis <dbl>, … # Select the first sample example <- lung_df %>% dplyr::filter(PID == \"#01 0-889-121\")  # Plot each of the ROIs and save in a list plot.list <- lapply(1:5, function(i) list())  for (id.i in unique(example$id)) {      # Subset   example.id <- example %>% dplyr::filter(id == id.i)      # ROI number   roi <- which(unique(example$id) %in% id.i)    # Plot   pp <- example.id %>%     dplyr::filter(!is.na(type)) %>%     ggplot(aes(x = x, y = y, color = type)) +     geom_point() +     theme_bw() +     ggtitle(paste0(\"ROI \", roi)) +     labs(color = \"Cell Type\")       # Save   plot.list[[roi]] <- pp }  # Construct the full plot cowplot::plot_grid(plot.list[[1]], plot.list[[2]],                     plot.list[[3]], plot.list[[4]],                    plot.list[[5]], nrow = 3, ncol = 2)"},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/lung_analysis.html","id":"weighted-aggregations","dir":"Articles","previous_headings":"","what":"Weighted Aggregations","title":"Analysis of a Non-Small Cell Lung Cancer Dataset","text":"first consider weighted aggregation approaches handling multiple ROIs. introduce formulations aggregations provided spagg : K‾iDiggle=1∑r=1Rinir∑r=1RinirK̂ir\\begin{equation*} \\bar K_i^{Diggle} = \\frac{1}{\\sum_{r=1}^{R_i} n_{ir}} \\sum_{r=1}^{R_i} n_{ir} \\hat K_{ir} \\end{equation*} K‾iBaddeley=1∑r=1Rinir2∑r=1Rinir2K̂ir\\begin{equation*}   \\bar K_i^{Baddeley} = \\frac{1}{\\sum_{r=1}^{R_i} n^2_{ir}} \\sum_{r=1}^{R_i} n^2_{ir} \\hat K_{ir} \\end{equation*} K‾iLandau=∑r=1RiAir∑r=1Rinir∑r=1Rinir2AirK̂ir\\begin{equation*}   \\bar K_i^{Landau} = \\frac{\\sum_{r=1}^{R_i} A_{ir}}{\\sum_{r=1}^{R_i} n_{ir}} \\sum_{r=1}^{R_i} \\frac{n^2_{ir}}{A_{ir}} \\hat K_{ir}  \\end{equation*} K‾iDiggle\\bar K_i^{Diggle} (Diggle, Lange, Beneš (1991)), K‾iBaddeley\\bar K_i^{Baddeley} (Baddeley et al. (1993)), K‾iLandau\\bar K_i^{Landau} (Landau, Rabe-Hesketh, Everall (2004)) proposed approaches aggregating replicated Ripley’s K statistics. estimate Ripley’s K r=20r=20 ROI. Note may take several seconds (1 minute) run. Note images CD4+ T cells compute Ripley’s K. images, resulting spatial summary statistic, area, number points defaults NA. remove images subsequent analysis. can now visualize distribution spatial summaries within image illustration variation spatial distribution tumor CD4+ T cells across ROIs.  now compute weighted averages given well standard arithmetic mean comparison. , visualize spread various spatial aggregation methods within sample.  now data.frame column corresponding average. Let’s add MHCII-high status variable can association testing. like test spatial colocalization tumor CD4+ T cells associated MHCII-high status, adjusting patient age. compare significance association across four spatial aggregation methods. Using mean, Diggle, Baddeley approaches, found significant association spatial colocalization CD4+ T cells tumors MHCII-high status. find significant association using Landau mean, however. Landau mean accounts variation intensity across ROIs , case, may informative understanding relationship cell colocalizations outcomes.","code":"# Set the radius r <- 20  # Save the image IDs ids <- unique(lung_df_tumor$id)  # Initialize a data.frame to store the results for each ROI results <- lung_df_tumor %>%    dplyr::select(PID, id) %>%   dplyr::distinct() %>%   dplyr::mutate(spatial = NA,                 npoints = NA,                 area = NA)   # Iterate through the ROIs (this will take a few seconds) for (i in 1:length(ids)) {     # Save the ith image  image.i <- lung_df_tumor %>%    dplyr::filter(id == ids[i]) %>%    dplyr::select(x, y, type) %>%    dplyr::mutate(type = factor(type))     # Convert to a point process object    w <- spatstat.geom::convexhull.xy(image.i$x, image.i$y)    image.i.subset <- image.i %>% dplyr::filter(type %in% c(\"CD4+ T cell\", \"Tumor\"))    image.i.subset$type <- droplevels(image.i.subset$type) # Remove unneeded cell types    image.ppp <- spatstat.geom::as.ppp(image.i.subset, W = w)        # Check if this image has sufficient numbers of both cell types    if (length(table(image.ppp$marks)) == 2) {      # Compute Kest      Ki <- spatstat.explore::Kcross(image.ppp, i = \"CD4+ T cell\", j = \"Tumor\", r = 0:r, nlarge = 10000)           # Calculate the number of points      npoints.i <- spatstat.geom::npoints(image.ppp)            # Calculate the area      area.i <- spatstat.geom::area(image.ppp)           # Save the results      results[results$id == ids[i],]$spatial <- Ki$iso[r+1]      results[results$id == ids[i],]$npoints <- npoints.i      results[results$id == ids[i],]$area <- area.i    }  }  # View the first few rows head(results) #> # A tibble: 6 × 5 #>   PID           id                                  spatial npoints    area #>   <chr>         <chr>                                 <dbl>   <int>   <dbl> #> 1 #01 0-889-121 #01 0-889-121 P44_[40864,18015].im3   1049.    1439 301361. #> 2 #01 0-889-121 #01 0-889-121 P44_[42689,19214].im3   1083.    1124 285454. #> 3 #01 0-889-121 #01 0-889-121 P44_[42806,16718].im3   1429.    1479 332974. #> 4 #01 0-889-121 #01 0-889-121 P44_[44311,17766].im3    946.    2726 333936. #> 5 #01 0-889-121 #01 0-889-121 P44_[45366,16647].im3   1856.    1366 333376. #> 6 #02 1-037-393 #02 1-037-393 P44_[56576,16907].im3     NA       NA     NA # Remove NAs results <- results[!is.na(results$spatial),]  # Visualize the distribution of spatial summaries within each sample results %>%   dplyr::mutate(PID = factor(PID)) %>%   ggplot(aes(x = PID, y = spatial, group = PID)) +    geom_boxplot() +   theme_bw() +    theme(axis.text.x = element_blank(),            axis.ticks.x = element_blank()) +   ggtitle(\"Ripley's K statistics for ROIs within a each sample\") +   ylab(\"Kest\") # Compute averages results_mean <- results %>%     dplyr::group_by(PID) %>%     dplyr::summarise_at(dplyr::vars(spatial),                         list(~mean(.x),                               ~landau.avg(K.vec = .x, area.vec = area, n.vec = npoints),                              ~diggle.avg(K.vec = .x, n.vec = npoints),                              ~baddeley.avg(K.vec = .x, n.vec = npoints)))  # Plot the averages results_mean %>%   tidyr::pivot_longer(2:5, names_to = \"mean\", values_to = \"value\") %>%   dplyr::mutate(mean = recode(mean,                                \"mean\" = \"Arithmetic Mean\",                               \"landau.avg\" = \"Landau Mean\",                               \"diggle.avg\" = \"Diggle Mean\",                               \"baddeley.avg\" = \"Baddeley Mean\")) %>%   ggplot(aes(x = PID, y = value, group = mean, color = mean)) +   geom_point() +   theme_bw() +   theme(axis.text.x = element_blank(),           axis.ticks.x = element_blank()) +   ylab(\"Average Kest\") +   ggtitle(\"Averaged Ripley's K within each sample\") +   scale_color_discrete(name = \"Aggregation Method\") # First, check the ordering matches all(unique(lung_df_tumor$PID) == results_mean$PID) # TRUE! #> [1] TRUE  # Add in MHCII-high status and age results_mean <- cbind.data.frame(   results_mean,   lung_df_tumor %>%      dplyr::select(PID, mhcII_high, age_at_diagnosis) %>%     dplyr::distinct() %>%     dplyr::select(mhcII_high, age_at_diagnosis) )  # Test for an association between CD4 T cell spatial distributions and MHCII-high status mean.glm <- glm(mhcII_high ~ mean + age_at_diagnosis, data = results_mean, family = binomial()) diggle.glm <- glm(mhcII_high ~ diggle.avg + age_at_diagnosis, data = results_mean, family = binomial()) baddeley.glm <- glm(mhcII_high ~ baddeley.avg + age_at_diagnosis, data = results_mean, family = binomial()) landau.glm <- glm(mhcII_high ~ landau.avg + age_at_diagnosis, data = results_mean, family = binomial())  # Save the p-values in a table and display cd4.tumor.pvals <- data.frame(   Method = c(\"Mean\", \"Diggle\", \"Baddeley\", \"Landau\"),   P.Value = c(summary(mean.glm)$coef[2,4], summary(diggle.glm)$coef[2,4],                summary(baddeley.glm)$coef[2,4], summary(landau.glm)$coef[2,4]) )  # Show the results cd4.tumor.pvals #>     Method    P.Value #> 1     Mean 0.03579355 #> 2   Diggle 0.02336449 #> 3 Baddeley 0.02962022 #> 4   Landau 0.06036164"},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/lung_analysis.html","id":"ensemble-approaches","dir":"Articles","previous_headings":"","what":"Ensemble Approaches","title":"Analysis of a Non-Small Cell Lung Cancer Dataset","text":"now illustrate using ensemble testing test hypothesis. ensemble approaches consider multiple random weights used construct aggregations spatial summary statistics. set random weights, test association weighted aggregation outcome. repeat many random weights combine resulting p-values using p-value combination method. purpose, use Cauchy combination test (Liu Xie (2020)). motivation behind ensemble approaches best set weights (weights yield highest power) generally unknown outset. reason, considering many different possible weights may gain us power may capture true relationship aggregated spatial summary statistics sample-level outcome. spagg contains implementations two different approaches introduced Getting Started vignette: Standard ensemble testing Combination testing now run approaches testing using results data.frame constructed . Across approaches, found significant association spatial colocalization CD4+ T cells tumor cells MHCII-high status.","code":"# Add the outcome back into the data results <- left_join(results,                       lung_df_tumor %>% dplyr::select(id, PID, mhcII_high, age_at_diagnosis) %>% distinct(),                       by = c(\"id\", \"PID\"))  # Run each ensemble test ensemble.res <- ensemble.avg(data = results,                               group = \"PID\",                               adjustments = \"age_at_diagnosis\",                              outcome = \"mhcII_high\",                              model = \"logistic\")  combo.res <- combo.weight.avg(data = results,                                group = \"PID\",                                adjustments = \"age_at_diagnosis\",                               outcome = \"mhcII_high\",                                model = \"logistic\")  # Add the results to the results data.frame cd4.tumor.pvals <- rbind.data.frame(   cd4.tumor.pvals,   data.frame(     Method = c(\"Ensemble\", \"Combo\"),     P.Value = c(ensemble.res$pval, combo.res$pval)   ) )  # Display cd4.tumor.pvals #>     Method    P.Value #> 1     Mean 0.03579355 #> 2   Diggle 0.02336449 #> 3 Baddeley 0.02962022 #> 4   Landau 0.06036164 #> 5 Ensemble 0.02574108 #> 6    Combo 0.02081173"},{"path":[]},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/spagg.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"spagg","text":"vignette, illustrate use spagg package analyze multiple spatial point patterns. particular, show use functions package construct aggregate spatial summary statistic across point patterns grouped together higher level factor, tissue sample. use aggregated spatial summary statistic predictor linear model group-level/sample-level outcome. motivation behind spagg analyses data multiplexed immunofluorescence spatial proteomics platforms may involve multiple regions--interest (ROIs) imaged tissue sample. ROI shows spatial location cells tissue can treated spatial point pattern. Access multiple ROIs per tissue sample can complicate associative analyses seeking characterize associations spatial distribution cells tissue sample-level outcomes need test association single sample-level outcome (e.g. survival case/control status) multiple spatial summary statistics. vignette use simulated spatial point pattern data. see data generated, please see spagg > data-raw > simdata.R.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/spagg.html","id":"loading-in-the-data-and-plotting","dir":"Articles","previous_headings":"","what":"Loading in the Data and Plotting","title":"spagg","text":"start loading spagg package simulated data. show first lines dataset . dataset organized mimic structure single-cell, spatial images produced multiplexed immunofluorescence spatial proteomics platforms. row corresponds detected cell, enumerated cell.id column. cells grouped together samples, denoted PID column images within samples, denoted id column. x y columns give (x,y) coordinates cell. type column denotes cell type corresponding row. simulated dataset, possible cell types b. Finally, column gives sample-level endpoint interested performing associative analyses. simulated dataset, column binary 1 0 indicator. can plot images PID=1. can helpful tool visually assess variation spatial distribution cells across ROIs. plots show simulated data, illustrate common challenge arises analyzing grouped point patterns reflecting multiple ROIs tissue sample: heterogeneity spatial clustering patterns. ROI shows different clusterig pattern among b cell types. going use spatial summary statistic, Ripley’s K, characterize degree adherence clustering, repulsion, complete spatial randomness ROI. spagg package contains five approaches handling multiple spatial summary statistics associative analyses. Three approaches weighted aggregations spatial summaries using fixed weights. two ensemble approaches generate random weights used construct weighted aggregations. Within ensemble replication, test association weighted aggregation sample-level outcome. ensemble resulting p-values omnibus test. first start illustrating weighted aggregations.","code":"# Load in packages library(spagg) library(ggplot2) library(cowplot) library(spatstat) #> Loading required package: spatstat.data #> Loading required package: spatstat.univar #> spatstat.univar 3.0-0 #> Loading required package: spatstat.geom #> spatstat.geom 3.3-2 #> Loading required package: spatstat.random #> spatstat.random 3.3-1 #> Loading required package: spatstat.explore #> Loading required package: nlme #> spatstat.explore 3.3-1 #> Loading required package: spatstat.model #> Loading required package: rpart #> spatstat.model 3.3-1 #> Loading required package: spatstat.linnet #> spatstat.linnet 3.2-1 #>  #> spatstat 3.1-1  #> For an introduction to spatstat, type 'beginner' library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:nlme': #>  #>     collapse #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # Load in data and show first few lines data(simdata) head(simdata) #>   PID            id        x        y cell.id type out #> 1   1 PID.1.image.1 27.09050 63.03496       1    a   1 #> 2   1 PID.1.image.1 21.97141 63.93355       2    a   1 #> 3   1 PID.1.image.1 18.70571 63.51489       3    b   1 #> 4   1 PID.1.image.1 20.29608 68.71936       4    b   1 #> 5   1 PID.1.image.1 22.74318 69.08458       5    b   1 #> 6   1 PID.1.image.1 17.47202 75.63201       6    b   1 # Plot the images for PID=1 --  # Save the image IDs PID.1.image.ids <- unique(simdata$id[simdata$PID == 1])  # Create a list of plots plot.list <- lapply(1:length(PID.1.image.ids), function(i) list())  # Iterate through the image IDs and create a plot for each for (id.i in PID.1.image.ids) {      pp <- simdata %>%           dplyr::filter(id == id.i) %>%           ggplot(aes(x = x, y = y, color = type)) +           geom_point() +            theme_bw() +           ggtitle(id.i)   plot.list[[which(PID.1.image.ids == id.i)]] <- pp    }  # Construct the full plot cowplot::plot_grid(plot.list[[1]], plot.list[[2]],                     plot.list[[3]], plot.list[[4]],                    plot.list[[5]], nrow = 3, ncol = 2)"},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/spagg.html","id":"weighted-aggregations","dir":"Articles","previous_headings":"","what":"Weighted Aggregations","title":"spagg","text":"first consider different approaches averaging Ripely’s K across ROIs within sample. Let’s start defining notation. Suppose sample ii RiR_i ROIs. Let nirn_{ir} number cells sample ii ROI rr. Let AirA_{ir} represent area sample ii ROI rr. Let K̂ir\\hat K_{ir} represent spatial distribution cells evaluate radius rr. spagg contains implementations following three weighted averages: K‾iDiggle=1∑r=1Rinir∑r=1RinirK̂ir\\begin{equation*} \\bar K_i^{Diggle} = \\frac{1}{\\sum_{r=1}^{R_i} n_{ir}} \\sum_{r=1}^{R_i} n_{ir} \\hat K_{ir} \\end{equation*} K‾iBaddeley=1∑r=1Rinir2∑r=1Rinir2K̂ir\\begin{equation*}   \\bar K_i^{Baddeley} = \\frac{1}{\\sum_{r=1}^{R_i} n^2_{ir}} \\sum_{r=1}^{R_i} n^2_{ir} \\hat K_{ir} \\end{equation*} K‾iLandau=∑r=1RiAir∑r=1Rinir∑r=1Rinir2AirK̂ir\\begin{equation*}   \\bar K_i^{Landau} = \\frac{\\sum_{r=1}^{R_i} A_{ir}}{\\sum_{r=1}^{R_i} n_{ir}} \\sum_{r=1}^{R_i} \\frac{n^2_{ir}}{A_{ir}} \\hat K_{ir}  \\end{equation*} K‾iDiggle\\bar K_i^{Diggle} (Diggle, Lange, Beneš (1991)), K‾iBaddeley\\bar K_i^{Baddeley} (Baddeley et al. (1993)), K‾iLandau\\bar K_i^{Landau} (Landau, Rabe-Hesketh, Everall (2004)) proposed approaches aggregating replicated Ripley’s K statistics. motivation behind aggregations weight Ripley’s K statistic sampling variance. However, sampling variance generally difficult write explicitly Ripley’s K method relies approximation. accuracy approximation relies whether intensity spatial point pattern (ratio number cells divided image area) consistent varied across ROIs. intensity consistent, methods yield similar average Ripley’s K statistics , turn, perform similarly-well hypothesis testing. intensity different across ROIs, also informative predicting outcome, Landau mean may perform better. first consider univariate analysis analyze one cell type. start cell type associations sample-level outcomes. estimate Ripley’s K r=30r=30 ROI. Note may take several seconds (30 seconds) run. can now visualize distribution spatial summaries within image illustration variation spatial distribution cells type across ROIs.  plot illustrates, can considerable variation spatial summary statistic values within single sample. , compute weighted averages given . also compute standard arithmetic mean comparison. , visualize spread various spatial aggregation methods within sample. samples, averages yield similar values. others, averages exhibit large variation, suggesting - -weight certain ROIs depending area ROI number cells.  now data.frame column corresponding average. can add outcome variable, , can association testing aggregated Ripley’s K statistics. like compare aggregated Ripley’s K statistics equal cases (=1) controls (=0). words, like test average spatial distribution cells across ROIs two groups. Using standard mean, Diggle method, Baddeley approach, found significant association spatial distribution cell type outcomes. find association, however, using Landau mean. explore varied performance methods bit , can plot intensity cell type within ROI examine variation across samples, shown . considerable variation across samples considerable variation within samples. Samples 4 6, example, show little variation across ROIs. However, Sample 4 1 image. samples, showed variation, like Samples 1 2. overall spread variation, however, 0.002 0.05.  can also examine intensity differed outcomes. plot intensities across ROIs examine associates case (=1) control (=0) status. , see variation ROI intensity across outcomes. Nonetheless, Landau mean still perform best.  also consider bivariate analysis examine bivariate colocalization cell types b. follow similar series steps, instead use Kcross function characterize colocalization cell types. Following steps , compute averages within PID test association outcome. found significant association spatial colocalization cell types b outcomes using standard arithmetic mean using Diggle mean using Baddeley Landau mean.","code":"# Set the radius r <- 30  # Save the image IDs ids <- unique(simdata$id)  # Initialize a data.frame to store the results for each ROI cell.a.results <- simdata %>%    dplyr::select(PID, id) %>%   dplyr::distinct() %>%   dplyr::mutate(spatial = NA,                 npoints = NA,                 area = NA)   # Iterate through the ROIs (this will take a few seconds) for (i in 1:length(ids)) {     # Save the ith image  image.i <- simdata %>%    dplyr::filter(id == ids[i]) %>%    dplyr::select(x, y, type)     # Convert to a point process object    w <- spatstat.geom::convexhull.xy(image.i$x, image.i$y)    image.i.subset <- image.i %>% dplyr::filter(type == \"a\")    image.ppp <- spatstat.geom::as.ppp(image.i.subset, W = w)    spatstat.geom::marks(image.ppp) <- image.i.subset$type     # Compute Kest    Ki <- spatstat.explore::Kest(image.ppp, r = 0:r)       # Calculate the number of points    npoints.i <- spatstat.geom::npoints(image.ppp)        # Calculate the area    area.i <- spatstat.geom::area(image.ppp)       # Save the results    cell.a.results[cell.a.results$id == ids[i],]$spatial <- Ki$iso[r+1]    cell.a.results[cell.a.results$id == ids[i],]$npoints <- npoints.i    cell.a.results[cell.a.results$id == ids[i],]$area <- area.i }  # View the first few rows head(cell.a.results) #>   PID            id  spatial npoints     area #> 1   1 PID.1.image.1 3402.412     206 8298.469 #> 2   1 PID.1.image.2 2779.338     538 9844.653 #> 3   1 PID.1.image.3 2623.948     134 7157.505 #> 4   1 PID.1.image.4 3382.632     151 8314.183 #> 5   1 PID.1.image.5 2911.225     157 7682.093 #> 6   2 PID.2.image.1 2374.916      62 7080.358 # Visualize the distribution of spatial summaries within each sample cell.a.results %>%   dplyr::mutate(PID = factor(PID)) %>%   ggplot(aes(x = PID, y = spatial, group = PID)) +    geom_boxplot() +   theme_bw() +   ggtitle(\"Ripley's K statistics for ROIs within a each sample\") +   ylab(\"Kest\") # Compute averages cell.a.results_mean <- cell.a.results %>%     dplyr::group_by(PID) %>%     dplyr::summarise_at(dplyr::vars(spatial),                         list(~mean(.x),                               ~landau.avg(K.vec = .x, area.vec = area, n.vec = npoints),                              ~diggle.avg(K.vec = .x, n.vec = npoints),                              ~baddeley.avg(K.vec = .x, n.vec = npoints)))  # Plot the averages cell.a.results_mean %>%   tidyr::pivot_longer(2:5, names_to = \"mean\", values_to = \"value\") %>%   dplyr::mutate(mean = recode(mean,                                \"mean\" = \"Arithmetic Mean\",                               \"landau.avg\" = \"Landau Mean\",                               \"diggle.avg\" = \"Diggle Mean\",                               \"baddeley.avg\" = \"Baddeley Mean\")) %>%   dplyr::mutate(PID = factor(PID)) %>%   ggplot(aes(x = PID, y = value, group = mean, color = mean)) +   geom_point() +   theme_bw() +   ylab(\"Average Kest\") +   ggtitle(\"Averaged Ripley's K within each sample\") +   scale_color_discrete(name = \"Aggregation Method\") # First, check the ordering matches all(unique(simdata$PID) == cell.a.results_mean$PID) # TRUE! #> [1] TRUE  # Add in the outcome cell.a.results_mean$out <- simdata %>%    dplyr::select(PID, out) %>%   dplyr::distinct() %>%   dplyr::select(out) %>%   unlist()  # Test for an association between CD4 T cell spatial distributions and MHCII-high status mean.glm <- glm(out ~ mean, data = cell.a.results_mean, family = binomial()) diggle.glm <- glm(out ~ diggle.avg, data = cell.a.results_mean, family = binomial()) baddeley.glm <- glm(out ~ baddeley.avg, data = cell.a.results_mean, family = binomial()) landau.glm <- glm(out ~ landau.avg, data = cell.a.results_mean, family = binomial())  # Save the p-values in a table and display cell.a.pvals <- data.frame(   Method = c(\"Mean\", \"Diggle\", \"Baddeley\", \"Landau\"),   P.Value = c(summary(mean.glm)$coef[2,4], summary(diggle.glm)$coef[2,4],                summary(baddeley.glm)$coef[2,4], summary(landau.glm)$coef[2,4]) )  # Show the results cell.a.pvals #>     Method     P.Value #> 1     Mean 0.006060067 #> 2   Diggle 0.023752779 #> 3 Baddeley 0.040878265 #> 4   Landau 0.205325277 # Calculate intensity for each ROI and plot cell.a.results %>%   dplyr::mutate(intensity = npoints/area) %>%   dplyr::mutate(PID = factor(PID)) %>%   ggplot(aes(x = PID, y = intensity, group = PID)) +    geom_boxplot() +   theme_bw() +   ggtitle(\"Variation in Point Pattern Intensity Within Each Sample\") # How many ROIs did each sample have? simdata %>% dplyr::select(PID, id) %>% dplyr::group_by(PID) %>% dplyr::summarise(n = n()) %>% head(10) #> # A tibble: 10 × 2 #>      PID     n #>    <int> <int> #>  1     1  2272 #>  2     2  1570 #>  3     3   466 #>  4     4   318 #>  5     5  1098 #>  6     6   170 #>  7     7  2292 #>  8     8  1004 #>  9     9  1419 #> 10    10   702  # Calculate the range in intensity cell.a.results %>%   dplyr::mutate(intensity = npoints/area) %>%   dplyr::summarise(min.intensity = min(intensity),                    max.intensity = max(intensity)) #>   min.intensity max.intensity #> 1   0.002237422    0.05464895 # Add in the outcome cell.a.results$out <- simdata %>%   dplyr::select(PID, id, out) %>%   dplyr::distinct() %>%   dplyr::select(out) %>%   unlist()  # Plot cell.a.results %>%   dplyr::mutate(intensity = npoints/area) %>%   dplyr::mutate(out = factor(out)) %>%   ggplot(aes(x = out, y = intensity)) +    geom_boxplot() +   theme_bw() +   ggtitle(\"Variation in Point Pattern Intensity Across Outcomes\") # Set the radius r <- 30  # Initialize a data.frame to store the results for each ROI cell.ab.results <- simdata %>%    dplyr::select(PID, id) %>%   dplyr::distinct() %>%   dplyr::mutate(spatial = NA,                 npoints = NA,                 area = NA)   # Iterate through the ROIs (this will take a few seconds) for (i in 1:length(ids)) {     # Save the ith image  image.i <- simdata %>%    dplyr::filter(id == ids[i]) %>%    dplyr::select(x, y, type)     # Convert to a point process object    w <- spatstat.geom::convexhull.xy(image.i$x, image.i$y)    image.ppp <- spatstat.geom::as.ppp(image.i, W = w)    spatstat.geom::marks(image.ppp) <- factor(image.i$type)     # Compute Kest    Ki <- spatstat.explore::Kcross(image.ppp, i = \"a\", j = \"b\", r = 0:r)       # Calculate the number of points    npoints.i <- spatstat.geom::npoints(image.ppp)        # Calculate the area    area.i <- spatstat.geom::area(image.ppp)       # Save the results    cell.ab.results[cell.ab.results$id == ids[i],]$spatial <- Ki$iso[r+1]    cell.ab.results[cell.ab.results$id == ids[i],]$npoints <- npoints.i    cell.ab.results[cell.ab.results$id == ids[i],]$area <- area.i }  # View the first few rows head(cell.ab.results) #>   PID            id  spatial npoints     area #> 1   1 PID.1.image.1 3352.665     388 8298.469 #> 2   1 PID.1.image.2 2778.717    1010 9844.653 #> 3   1 PID.1.image.3 2695.169     257 7157.505 #> 4   1 PID.1.image.4 3406.225     316 8314.183 #> 5   1 PID.1.image.5 2947.781     301 7682.093 #> 6   2 PID.2.image.1 2449.192     124 7080.358 # Compute averages cell.ab.results_mean <- cell.ab.results %>%     dplyr::group_by(PID) %>%     dplyr::summarise_at(dplyr::vars(spatial),                         list(~mean(.x),                               ~landau.avg(K.vec = .x, area.vec = area, n.vec = npoints),                              ~diggle.avg(K.vec = .x, n.vec = npoints),                              ~baddeley.avg(K.vec = .x, n.vec = npoints)))  # First, check the ordering matches all(unique(simdata$PID) == cell.ab.results_mean$PID) # TRUE! #> [1] TRUE  # Add in the outcome cell.ab.results_mean$out <- simdata %>%    dplyr::select(PID, out) %>%   dplyr::distinct() %>%   dplyr::select(out) %>%   unlist()  # Test for an association between CD4 T cell spatial distributions and MHCII-high status mean.ab.glm <- glm(out ~ mean, data = cell.ab.results_mean, family = binomial()) diggle.ab.glm <- glm(out ~ diggle.avg, data = cell.ab.results_mean, family = binomial()) baddeley.ab.glm <- glm(out ~ baddeley.avg, data = cell.ab.results_mean, family = binomial()) landau.ab.glm <- glm(out ~ landau.avg, data = cell.ab.results_mean, family = binomial())  # Save the p-values in a table and display cell.ab.pvals <- data.frame(   Method = c(\"Mean\", \"Diggle\", \"Baddeley\", \"Landau\"),   P.Value = c(summary(mean.ab.glm)$coef[2,4], summary(diggle.ab.glm)$coef[2,4],                summary(baddeley.ab.glm)$coef[2,4], summary(baddeley.ab.glm)$coef[2,4]) )  # Show the results cell.ab.pvals #>     Method    P.Value #> 1     Mean 0.02393126 #> 2   Diggle 0.01362797 #> 3 Baddeley 0.05261129 #> 4   Landau 0.05261129"},{"path":"https://sarahsamorodnitsky.github.io/spagg/articles/spagg.html","id":"ensemble-approaches","dir":"Articles","previous_headings":"","what":"Ensemble Approaches","title":"spagg","text":"now illustrate using ensemble testing test hypothesis, whether spatial distribution cells equal cases (=1) controls (=0). ensemble approaches consider multiple random weights used construct aggregations spatial summary statistics. set random weights, test association weighted aggregation outcome. repeat many random weights combine resulting p-values using p-value combination method. purpose, use Cauchy combination test (Liu Xie (2020)). motivation behind ensemble approaches best set weights (weights yield highest power) generally unknown outset. reason, considering many different possible weights may gain us power may capture true relationship aggregated spatial summary statistics sample-level outcome randomly simulating weights. spagg contains implementations two different approaches: : approach, spagg randomly generates weights standard normal distribution used construct weighted mean Ripley’s K estimates obtained ROI. process repeated many times. random set weights, association weighted mean spatial summary sample-level outcomes tested. resulting p-values combined using Cauchy combination test. approach contained ensemble.avg function. : approach, spagg randomly generates weights standard normal distribution uses weights well number cells ROI construct weighted mean Ripley’s K estimates. process repeated many times resulting p-values combined using Cauchy combination test. approach contained combo.weight.avg function. now run approaches testing univariate analysis using cell..results data.frame constructed contains Ripley’s K value r=30. , mean ensemble approaches yielded lowest p-values. combo approach also yielded low p-value. suggests concordance among methods detecting significant association spatial distribution cell type case/control status. can also perform ensemble testing bivariate case. show using cell.ab.results object. , ensemble combo approaches yielded low p-values, suggesting spatial colocalization cell types b associated outcome.","code":"# Run each ensemble test ensemble.res <- ensemble.avg(data = cell.a.results,                               group = \"PID\",                               outcome = \"out\",                               model = \"logistic\")  combo.res <- combo.weight.avg(data = cell.a.results,                                group = \"PID\",                                outcome = \"out\",                                model = \"logistic\")  # Add the p-values to the results above cell.a.pvals <- rbind.data.frame(   cell.a.pvals,   data.frame(     Method = c(\"Ensemble\", \"Combo\"),     P.Value = c(ensemble.res$pval, combo.res$pval)   ) )  # Print the results cell.a.pvals #>     Method     P.Value #> 1     Mean 0.006060067 #> 2   Diggle 0.023752779 #> 3 Baddeley 0.040878265 #> 4   Landau 0.205325277 #> 5 Ensemble 0.009344770 #> 6    Combo 0.020319545 # Add the outcome back into the data cell.ab.results <- left_join(cell.ab.results,                       simdata %>% dplyr::select(id, PID, out) %>% distinct(),                       by = c(\"id\", \"PID\"))  # Run each ensemble test ensemble.res <- ensemble.avg(data = cell.ab.results, group = \"PID\",                               outcome = \"out\", model = \"logistic\")  combo.res <- combo.weight.avg(data = cell.ab.results, group = \"PID\",                                outcome = \"out\", model = \"logistic\") #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  # Add the p-values to the results above cell.ab.pvals <- rbind.data.frame(   cell.ab.pvals,   data.frame(     Method = c(\"Ensemble\", \"Combo\"),     P.Value = c(ensemble.res$pval, combo.res$pval)   ) )  # Print the results cell.ab.pvals #>     Method    P.Value #> 1     Mean 0.02393126 #> 2   Diggle 0.01362797 #> 3 Baddeley 0.05261129 #> 4   Landau 0.05261129 #> 5 Ensemble 0.02104012 #> 6    Combo 0.02473175"},{"path":[]},{"path":"https://sarahsamorodnitsky.github.io/spagg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sarah Samorodnitsky. Maintainer.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Samorodnitsky S (2024). spagg: Aggregation approaches combining spatial summary statistics. R package version 0.1.0, https://sarahsamorodnitsky.github.io/spagg/.","code":"@Manual{,   title = {spagg: Aggregation approaches for combining spatial summary statistics},   author = {Sarah Samorodnitsky},   year = {2024},   note = {R package version 0.1.0},   url = {https://sarahsamorodnitsky.github.io/spagg/}, }"},{"path":[]},{"path":"https://sarahsamorodnitsky.github.io/spagg/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Aggregation approaches for combining spatial summary statistics","text":"goal spagg provide tools aggregating spatial summary statistics generated multiple regions--interest (ROIs) collected tissue sample using multiplexed spatial proteomics technologies. analysis spatial proteomics often involves calculating spatial summary statistic, Ripley’s K, quantify level clustering, repulsion, complete spatial randomness exhibited cells. Given multiple ROIs sample, aggregating spatial summary statistics ROI single value can facilitate downstream association testing clinical outcomes. spagg provides several methods aggregating spatial summary statistics. include three weighted means (diggle.avg, baddeley.avg, landau.avg) two ensemble approaches (ensemble.avg andcombo.weight.avg). weighted means aggregate summary statistics using weighted mean based number cells ROI /area ROI. ensemble approaches use random weights construct aggregation combine resulting p-values across many randomly-generated weights ensemble test. weighted means can easily incorporated analytical approaches spatial proteomics, SPatial Omnibus Test (SPOT). Incorporation ensemble approaches SPOT development.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Aggregation approaches for combining spatial summary statistics","text":"can install development version spagg GitHub : spagg relies several required dependencies: ACAT, dplyr, magrittr, spatstat family packages, stats, survival, tidyselect. ACAT package currently development Github. properly install spagg, latest version devtools required ensure can install ACAT Github. addition, spagg relies several suggested packages run vignettes: knitr, rmarkdown, ggplot2, tidyr, spatstat.utils, spatstat.univar, cowplot, SPOT. SPOT also available Github, latest version devtools required.","code":"# First, install devtools if (!require(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install from Github devtools::install_github(\"sarahsamorodnitsky/spagg\")"},{"path":"https://sarahsamorodnitsky.github.io/spagg/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Aggregation approaches for combining spatial summary statistics","text":"example usage spagg single-cell spatial proteomics imaging analysis, please see associated vignettes. vignettes illustrate apply weighted means ensemble approaches analyses real multiplexed spatial proteomics datasets.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/index.html","id":"bugs-and-improvements","dir":"","previous_headings":"","what":"Bugs and Improvements","title":"Aggregation approaches for combining spatial summary statistics","text":"Please feel free use Issues tab note bugs suggest improvements.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/baddeley.avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute aggregation of Ripley's K based on Baddeley et al. (1993) — baddeley.avg","title":"Compute aggregation of Ripley's K based on Baddeley et al. (1993) — baddeley.avg","text":"Compute aggregation Ripley's K based Baddeley et al. (1993)","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/baddeley.avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute aggregation of Ripley's K based on Baddeley et al. (1993) — baddeley.avg","text":"","code":"baddeley.avg(K.vec, n.vec)"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/baddeley.avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute aggregation of Ripley's K based on Baddeley et al. (1993) — baddeley.avg","text":"K.vec Vector Ripley's K estimates across series images n.vec Vector number points image","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/baddeley.avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute aggregation of Ripley's K based on Baddeley et al. (1993) — baddeley.avg","text":"Returns weighted average Ripley's K values based number points image","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/baddeley.avg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute aggregation of Ripley's K based on Baddeley et al. (1993) — baddeley.avg","text":"Baddeley et al. (1993). Analysis Three-Dimensional Point Pattern Replication. Journal Royal Statistical Society. Series C (Applied Statistics), 42(4), 641-668.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/baddeley.avg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute aggregation of Ripley's K based on Baddeley et al. (1993) — baddeley.avg","text":"","code":"# Generate simulated Ripley's K values, areas, and number of points K.vec <- rnorm(3, mean = 1000, sd = 100) n.vec <- rnorm(3, mean = 300, sd = 50)  # Compute a weighted average baddeley.avg(K.vec, n.vec) #> [1] 874.9542"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/combo.weight.avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using a combination of random weighting and weighting by the number of points — combo.weight.avg","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using a combination of random weighting and weighting by the number of points — combo.weight.avg","text":"Ensemble aggregation spatial summaries (e.g. Ripley's K) using combination random weighting weighting number points","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/combo.weight.avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using a combination of random weighting and weighting by the number of points — combo.weight.avg","text":"","code":"combo.weight.avg(   data,   group,   outcome,   cens = NULL,   model = \"survival\",   adjustments = NULL,   n.ensemble = 1000,   seed = NULL )"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/combo.weight.avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using a combination of random weighting and weighting by the number of points — combo.weight.avg","text":"data data.frame tibble containing data, including patient IDs, image IDs, outcomes, spatial summaries. group Grouping variable images, e.g. patient IDs. outcome Column name outcome data. cens Column name event indicator column. using survival outcome, leave NULL. model Model type. Options \"logistic\" logistic regression \"survival\" Cox proportional hazards model. adjustments Column names columns data adjust ensemble replication n.ensemble many ensemble replications done? Default 1000. seed seed reproducible results. left NULL, funciton generate seed return .","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/combo.weight.avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using a combination of random weighting and weighting by the number of points — combo.weight.avg","text":"list length 2 containing overall p-value obtained using Cauchy combination test (`pval`) seed used reproducibility (`seed`). user provided seed, `seed` match given. Otherwise, function randomly selects seed returned.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/combo.weight.avg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using a combination of random weighting and weighting by the number of points — combo.weight.avg","text":"","code":"# Pick a radius to evaluate Ripley's K r <- 30  # Save the image IDs ids <- unique(simdata$id)  # Compute Ripley's K for tumor cells at r K.vec <- c() npoints.vec <- c() for (i in 1:length(ids)) {   # Save the ith image   image.i <- simdata %>%     dplyr::filter(id == ids[i]) %>%     dplyr::select(x,y,type)    # Convert to a point process object   w <- spatstat.geom::convexhull.xy(image.i$x, image.i$y)  image.i.subset <- image.i %>% dplyr::filter(type == \"a\")  image.ppp <- spatstat.geom::as.ppp(image.i.subset, W = w)    # Compute Kest   Ki <- spatstat.explore::Kest(image.ppp, r = 0:30)    # Calculate the number of points   npoints.vec[i] <- spatstat.geom::npoints(image.ppp)    # Save the result   K.vec[i] <- Ki$iso[31] }  data.subset <- simdata %>%   dplyr::select(tidyselect::all_of(c(\"id\", \"PID\", \"out\"))) %>%   dplyr::distinct()  data.subset$spatial <- K.vec data.subset$npoints <- npoints.vec  # Remove NaNs data.subset <- data.subset %>% dplyr::filter(!is.na(spatial))  # Test combo.weight.avg(data = data.subset, group = \"PID\", outcome = \"out\", model = \"logistic\") #> $pval #> [1] 0.02052924 #>  #> $seed #> [1] 147083781 #>"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/diggle.avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute aggregation of Ripley's K based on Diggle et al. (1991) — diggle.avg","title":"Compute aggregation of Ripley's K based on Diggle et al. (1991) — diggle.avg","text":"Compute aggregation Ripley's K based Diggle et al. (1991)","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/diggle.avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute aggregation of Ripley's K based on Diggle et al. (1991) — diggle.avg","text":"","code":"diggle.avg(K.vec, n.vec)"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/diggle.avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute aggregation of Ripley's K based on Diggle et al. (1991) — diggle.avg","text":"K.vec Vector Ripley's K estimates across series images n.vec Vector number points image","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/diggle.avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute aggregation of Ripley's K based on Diggle et al. (1991) — diggle.avg","text":"Returns weighted average Ripley's K values based number points image","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/diggle.avg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute aggregation of Ripley's K based on Diggle et al. (1991) — diggle.avg","text":"Diggle et al. (1991). Analysis Variance Replicated Spatial Point Patterns Clinical Neuroanatomy. Journal American Statistical Association, 86(415), 618-625.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/diggle.avg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute aggregation of Ripley's K based on Diggle et al. (1991) — diggle.avg","text":"","code":"# Generate simulated Ripley's K values, areas, and number of points K.vec <- rnorm(3, mean = 1000, sd = 100) n.vec <- rnorm(3, mean = 300, sd = 50)  # Compute a weighted average diggle.avg(K.vec, n.vec) #> [1] 929.7964"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/ensemble.avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting — ensemble.avg","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting — ensemble.avg","text":"Ensemble aggregation spatial summaries (e.g. Ripley's K) using random weighting","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/ensemble.avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting — ensemble.avg","text":"","code":"ensemble.avg(   data,   group,   outcome,   cens = NULL,   model = \"survival\",   adjustments = NULL,   n.ensemble = 1000,   seed = NULL )"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/ensemble.avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting — ensemble.avg","text":"data data.frame tibble containing data, including patient IDs, image IDs, outcomes, spatial summaries. group Grouping variable images, e.g. patient IDs. outcome Column name outcome data. cens Column name event indicator column. using survival outcome, leave NULL. model Model type. Options \"logistic\" logistic regression \"survival\" Cox proportional hazards model. adjustments Column names columns data adjust ensemble replication n.ensemble many ensemble replications done? Default 1000. seed seed reproducible results. left NULL, funciton generate seed return .","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/ensemble.avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting — ensemble.avg","text":"list length 2 containing overall p-value obtained using Cauchy combination test (`pval`) seed used reproducibility (`seed`). user provided seed, `seed` match given. Otherwise, function randomly selects seed returned.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/ensemble.avg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting — ensemble.avg","text":"Liu et al. (2023) Ensemble methods testing global null. Journal Royal Statistical Society Series B: Statistical Methodology. 00. 1-26.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/ensemble.avg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensemble aggregation of spatial summaries (e.g. Ripley's K) using random weighting — ensemble.avg","text":"","code":"# Pick a radius to evaluate Ripley's K r <- 30  # Save the image IDs ids <- unique(simdata$id)  # Compute Ripley's K for tumor cells at r K.vec <- c() for (i in 1:length(ids)) {  # Save the ith image  image.i <- simdata %>%    dplyr::filter(id == ids[i]) %>%    dplyr::select(x,y,type)   # Convert to a point process object  w <- spatstat.geom::convexhull.xy(image.i$x, image.i$y)  image.i.subset <- image.i %>% dplyr::filter(type == \"a\")  image.ppp <- spatstat.geom::as.ppp(image.i.subset, W = w)   # Compute Kest  Ki <- spatstat.explore::Kest(image.ppp, r = 0:30)   # Save the result  K.vec[i] <- Ki$iso[31] }  data.subset <- simdata %>%  dplyr::select(tidyselect::all_of(c(\"id\", \"PID\", \"out\"))) %>%  dplyr::distinct()  data.subset$spatial <- K.vec  # Remove NaNs data.subset <- data.subset %>% dplyr::filter(!is.na(spatial))  # Test ensemble.avg(data = data.subset, group = \"PID\", outcome = \"out\", model = \"logistic\") #> $pval #> [1] 0.009199312 #>  #> $seed #> [1] 394048819 #>"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/landau.avg.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute aggregation of Ripley's K based on Landau et al. (2004) — landau.avg","title":"Compute aggregation of Ripley's K based on Landau et al. (2004) — landau.avg","text":"Compute aggregation Ripley's K based Landau et al. (2004)","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/landau.avg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute aggregation of Ripley's K based on Landau et al. (2004) — landau.avg","text":"","code":"landau.avg(K.vec, area.vec, n.vec)"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/landau.avg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute aggregation of Ripley's K based on Landau et al. (2004) — landau.avg","text":"K.vec Vector Ripley's K estimates across series images area.vec Vector sizes window image n.vec Vector number points image","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/landau.avg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute aggregation of Ripley's K based on Landau et al. (2004) — landau.avg","text":"Returns weighted average Ripley's K values based sizes images numbers points","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/landau.avg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute aggregation of Ripley's K based on Landau et al. (2004) — landau.avg","text":"Landau et al. (2004) Nonparametric One-way Analysis Variance Replicated Bivariate Spatial Point Patterns. Biometrical Journal, 46(1), 19-34.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/landau.avg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute aggregation of Ripley's K based on Landau et al. (2004) — landau.avg","text":"","code":"# Generate simulated Ripley's K values, areas, and number of points K.vec <- rnorm(3, mean = 1000, sd = 100) area.vec <- rnorm(3, mean = 20000, sd = 100) n.vec <- rnorm(3, mean = 300, sd = 50)  # Compute a weighted average landau.avg(K.vec, area.vec, n.vec) #> [1] 1058.028"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/simdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated point pattern dataset for examples — simdata","title":"Simulated point pattern dataset for examples — simdata","text":"randomly-generated dataset purpose illustrating usage functions contained package. See spagg/data-raw/simdata.R code simulate dataset.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/simdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated point pattern dataset for examples — simdata","text":"","code":"simdata"},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/simdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated point pattern dataset for examples — simdata","text":"## `simdata` data frame 38515 rows 6 columns PID Sample ID groups regions--interest (ROI) together id ROI ID. corresponds image within larger sample cell.id Enumerates cell within ROI. row corresponds cell. x x-coordinate cell within ROI y y-coordinate cell within ROI type Cell-type label. Options '' 'b'. randomly generated. Sample-level binary outcome. Note within PID.","code":""},{"path":"https://sarahsamorodnitsky.github.io/spagg/reference/spagg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"spagg: Aggregation approaches for combining spatial summary statistics — spagg-package","title":"spagg: Aggregation approaches for combining spatial summary statistics — spagg-package","text":"Implements six aggregation approaches combining spatial summary statistics estimated multiple multiplexed spatial proteomics images samples collected location person.","code":""},{"path":[]}]
